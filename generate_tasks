#!/usr/bin/env python3
"""The task generator."""
import sys
from argparse import ArgumentParser

from incremental_tasks import (
    ElementaryLanguage,
    HardSymbolCounting,
    IncreasingPeriod,
    Periodic,
    SymbolCounting,
    Task,
    HarderElementaryLanguage,
)

ID_TO_TASK = {
    1: Periodic,
    2: IncreasingPeriod,
    5: ElementaryLanguage,
    3: SymbolCounting,
    4: HardSymbolCounting,
    6: HarderElementaryLanguage,
}

NAME_TO_TASK = {
    "periodic": Periodic,
    "inc-per": IncreasingPeriod,
    "sym-ct": SymbolCounting,
    "hard-sym-ct": HardSymbolCounting,
    "qa": ElementaryLanguage,
    "hard-qa": HarderElementaryLanguage,
}


def make_parser() -> ArgumentParser:
    parser = ArgumentParser(
        description="This is the incremental tasks generator. "
        "You can use it to generate the tasks and use the benchmark."
    )
    parser.add_argument(
        "task_id",
        metavar="ID",
        type=str,
        help="The ID of the task to generate sentences for.",
    )
    parser.add_argument(
        "-n",
        "--n-examples",
        type=int,
        default=1000,
        help="Maximum number of sentences to generate (actual number generated "
        "might be lower for tasks "
        "with a low number of distinct examples).",
    )
    parser.add_argument(
        "--extra-args",
        type=list[str],
        nargs="*",
        help="Optional additional arguments to be passed to the task instance "
        "(see documentatio for details).",
    )

    return parser


def get_task(task_id: str) -> Task:
    if task_id.isdigit():
        return ID_TO_TASK[int(task_id)]()
    else:
        return NAME_TO_TASK[task_id]()


if __name__ == "__main__":
    argparser = make_parser()
    args = argparser.parse_args()

    task: Task = get_task(args.task_id)
    for _ in range(args.n_examples):
        sys.stdout.write(" ".join(task.generate_single()[0]) + "\n")
